{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"kOAeeA,EAZF,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAQC,EAAQ,EAARA,GAC5B,OACI,yBAAKC,UAAY,wDAChB,yBAAKC,IAAK,QAAQC,IAAG,+BAA4BH,EAA5B,cACnB,6BACM,4BAAKF,GACL,2BAAIC,MCaHK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACM,6BAEHA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OACD,kBAAC,EAAD,CACEC,IAAOD,EACPR,GAAMK,EAAOG,GAAGR,GAChBF,KAAQO,EAAOG,GAAGV,KAClBC,MAASM,EAAOG,GAAGT,aCEXW,EAbG,SAAC,GAAiC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACI,yBAAKX,UAAY,OACR,2BACJA,UAAY,mCACZY,KAAO,SACPC,YAAc,gBACdC,SAAYH,MCCPI,EARA,SAACC,GACf,OACC,yBAAKC,MAAS,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACtEJ,EAAMK,WCgBMC,E,kDAjBd,WAAYN,GAAQ,IAAD,8BAClB,cAAMA,IACDO,MAAQ,CACZC,UAAU,GAHO,E,8DAMDC,EAAQC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIrB,OAAGG,KAAKJ,MAAMC,SACL,uDAEFG,KAAKX,MAAMK,a,GAfEQ,aCgDZC,G,wDA3Cd,aAAc,IAAD,8BACZ,gBAaDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAAElB,YAAasB,EAAMC,OAAOC,SAb1C,EAAKX,MAAQ,CACZnB,OAAQ,GACFM,YAAa,IAJR,E,gEAQQ,IAAD,OACnByB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACxB,OAAQmC,S,+BAM9B,IAAD,EAC2BZ,KAAKJ,MAA9BnB,EADF,EACEA,OAASM,EADX,EACWA,YACZ8B,EAAiBpC,EAAOqC,QAAO,SAAAC,GACjC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASlC,EAAYiC,kBAEnD,OAAIvC,EAAOyC,OAKf,yBAAK7C,UAAY,MACjB,wBAAIA,UAAY,MAAhB,eACA,kBAAC,EAAD,CAAWW,aAAgBgB,KAAKI,iBAChC,kBAAC,EAAD,KACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU3B,OAAWoC,OATX,2C,GAxBEX,cCKEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD4H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMqC,a","file":"static/js/main.a74b5db8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = ({name, email , id}) => {\r\n\treturn(\r\n     <div className = ' tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n\t     <img alt ='robot' src = {`https://robohash.org/${id}?200*200`} /> \r\n\t       <div>\r\n              <h2>{name}</h2>\r\n              <p>{email}</p>\r\n\t       </div>\r\n     </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n\r\n// {props.name} is js exp so we have to wrap it in curly  brackets","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\treturn(\r\n       <div>\r\n\t\t\t{   \r\n\t\t\t\trobots.map((user, i) => {\r\n\t\t\t\t  return (\r\n\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey = {i} \r\n\t\t\t\t\t\t\tid = {robots[i].id}\r\n\t\t\t\t\t\t\tname = {robots[i].name} \r\n\t\t\t\t\t\t\temail = {robots[i].email}\r\n\t\t\t\t\t\t/>\r\n\t\t           );\r\n\t\t\t   })\r\n\t\t\t}\r\n\t\t</div>\r\n      );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange }) => {\r\n\treturn (\r\n\t    <div className = 'pa2'>\r\n              <input \r\n\t\t        className = 'pa3 ba b--green bg-lightest-blue'\r\n\t\t        type = 'search' \r\n\t\t        placeholder = 'Search-Robots' \r\n\t\t        onChange = {searchChange}\r\n          />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t<div style = {{overflowY: 'scroll', border :'5px solid black', height: '800px'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\n\r\nclass ErrorBoundry extends Component{\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n componentDidCatch(error , info) {\r\n   this.setState({hasError: true})\r\n }\r\n\r\n\t render(){\r\n       if(this.state.hasError){\r\n       \t return <h1>Ooops. That is not good</h1>\r\n       }\r\n       return this.props.children\r\n\t }\r\n}\r\nexport default ErrorBoundry;\r\n","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\tconstructor(){ \r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t        searchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => this.setState({robots: users}));\r\n\t\t\r\n   }\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({ searchfield: event.target.value})\r\n\t}\r\n\trender(){\r\n\t\t  const {robots , searchfield } = this.state;\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n\t     return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n        if(!robots.length){\r\n        \treturn <h1>Loading</h1>\r\n        }\r\n        else{\r\n        \treturn(\r\n\t\t\t\t<div className = 'tc'>\r\n\t\t\t\t<h1 className = 'f2'>Robofriends</h1>\r\n\t\t\t\t<SearchBox searchChange = {this.onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t  <CardList robots = { filteredRobots }/>\r\n\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t       );\r\n        }\r\n\t\t\r\n    }\r\n}\r\n\t\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />,document.getElementById('root'));\nserviceWorker.unregister();\n "],"sourceRoot":""}